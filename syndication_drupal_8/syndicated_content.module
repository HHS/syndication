<?php
/**
 * @file
 * A module that displays pages syndicated from a remote resource.
 */

use Drupal\Core\Url;
use Drupal\Core\Link;
use Drupal\Core\Entity\EntityInterface;


/// leave a few public functions here incase another module developer wants to trigger some of these actions themselves
/*
function syndicated_content_get_node_metadata ( &$node ) { return null; } /// update node with data from source
function syndicated_content_do_node_update    ( &$node ) { return null; } /// update node with data from source
function syndicated_content_do_node_publish   ( &$node ) { return null; } /// try and publish local node
function syndicated_content_do_node_unpublish ( &$node ) { return null; } /// try and unpublish local node
*/

/// all main drupal hooks must be here - each main hook includes a file for the rest of it's stuff

/// Routes handled by module
function syndicated_content_menu()
{
  $items = array();

    $items['admin/config/syndicated_content'] = array(
    'title'            => 'Syndicated Content Settings',
    'description'      => 'Configuration for Syndicated Content module',
    'page callback'    => 'syndicated_content_settings_page',
    'access arguments' => array('syndication configuration rights'),
    'type'             => MENU_NORMAL_ITEM
  );

  $items['admin/config/syndicated_content/sources'] = array(
    'title'            => 'Syndicated Content Sources',
    'description'      => 'Sources of Syndicated Content',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('syndicated_content_admin_sources_form'),
    'access arguments' => array('syndication configuration rights'),
    'type'             => MENU_NORMAL_ITEM
  );
/*
  $items['admin/config/syndicated_content/content'] = array(
    'title'            => 'Syndicated Item List',
    'description'      => 'Listing of Syndicated Content',
    'page callback'    => '_syndicated_content_listings_page',
    'access arguments' => array('access administration pages'),
    'type'             => MENU_NORMAL_ITEM
  );
*/
  $items['syndicated_content/subscription'] = array(
    'page callback'    => 'syndicated_content_listener',
    'access callback'  => TRUE,
    'type'             => MENU_CALLBACK,
  );
/*
  $items['syndicated_content/multiform'] = array(
    'title'            => 'MultiForm Test',
    'page callback'    => 'syndicated_content_multiform',
    'page arguments'   => array('syndicated_content_form'),
    'access callback'  => TRUE,
    'access arguments' => array('access administration pages'),
    'type'             => MENU_NORMAL_ITEM
  );
*/
  return $items;
}

function syndicated_content_init() {
    module_load_include('php','syndicated_content','includes/syndicated_content.util');
    _syndicated_content_init();
}

function syndicated_content_help($path, $arg)
{
    switch ($path)
    {
        case "admin/help#syndicated_content":
            return '<p>' . t("Displays pages syndicated from a remote resource") . '</p>';
            break;
    }
}

function syndicated_content_forms( $form_id, $args )
{
    module_load_include('php','syndicated_content','includes/syndicated_content.admin');
    $forms['syndicated_content_admin_sources_form'] = array(
        'callback' => '_syndicated_content_admin_sources_form',
    );
    return $forms;
}

/// All global functions must be present in main module file
/// but I want as little code here as possible

/// MODULE SETTINGS ADMIN

function syndicated_content_settings_page()
{
    module_load_include('php','syndicated_content','includes/syndicated_content.admin');
    return _syndicated_content_settings_page();
}

function syndicated_content_form($form, &$form_state)
{
    module_load_include('php','syndicated_content','includes/syndicated_content.admin');
    return _syndicated_content_form($form,$form_state);
}

function syndicated_content_admin_sources_form_validate($form, &$form_state)
{
  /// we need to this run before any other actions take place, so I choose hook_validate over hook_presave
  module_load_include('php','syndicated_content','includes/syndicated_content.admin');
  return _syndicated_content_admin_sources_form_validate($form,$form_state);
}

/// SYNDICATION SOURCE LISTENER

function syndicated_content_listener()
{
    module_load_include('php','syndicated_content','includes/syndicated_content.listener');
    return _syndicated_content_listener();
}

/// AJAX HANDLERS

function syndicated_content_lookup_ajax( $form, &$form_state ) {
    module_load_include('php','syndicated_content','includes/syndicated_content.ajax');
    return _syndicated_content_lookup_ajax($form,$form_state);
}

function syndicated_content_search_ajax( $form, &$form_state ) {
    module_load_include('php','syndicated_content','includes/syndicated_content.ajax');
    return _syndicated_content_search_ajax($form,$form_state);
}

function syndicated_content_browse_ajax( $form, &$form_state ) {
    module_load_include('php','syndicated_content','includes/syndicated_content.ajax');
    return _syndicated_content_browse_ajax($form,$form_state);
}

/// FORMS

// alter admin content results
// not working for drupal 8
/*
function syndicated_content_form_node_admin_content_alter(&$form, \Drupal\Core\Form\FormStateInterface &$form_state, $form_id) {
    module_load_include('php','syndicated_content','includes/syndicated_content.forms');
    return _syndicated_content_form_node_admin_content_alter($form, $form_state, $form_id);
}
*/

/**
 * hook_form_alter
 *
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 * @param $form_id
 */
function syndicated_content_form_alter( &$form, \Drupal\Core\Form\FormStateInterface &$form_state, $form_id ) {

    // get the content types that are set to auto syndicate
    $conn = \Drupal::database();

    $check_auto_syndicated_field = $conn->schema()->fieldExists('syndicated_content_types', 'auto_syndicate');

    if($check_auto_syndicated_field) {

      $drupaldata = $conn->select('syndicated_content_types', 'sct')
        ->fields('sct', array('drupal_type'))
        ->condition('auto_syndicate', 1)
        ->execute()
        ->fetchAll();

      // loop through the content types to  auto syndiated and add custom submit handler.
      foreach ($drupaldata as $type) {

        if($form_id == 'node_' . $type->drupal_type . '_form') {
          $form['actions']['submit']['#submit'][] = 'auto_publish_submit';
        }
      }

    } else {

      drupal_set_message("Please run the update script to get the auto syndicate function.");
    }



  $user = \Drupal::currentUser();
  if($user->hasPermission('syndication publish')) {

    $contentTypes = \Drupal::service('entity_type.manager')->getStorage('node_type')->loadMultiple();
    foreach($contentTypes as $contentType) {
      $content_id[] = 'node_' . $contentType->id() . '_edit_form';
    }

    // only show for page and article
    if (in_array($form_id, $content_id)) {

      $node = $form_state->getFormObject()->getEntity();

      if (!$node->isNew()) {

        $conn = \Drupal::database();

        $syndicated_content = $conn->select('syndicated_content', 'sc')
          ->fields('sc')
          ->condition('node_id', $node->id())
          ->execute()
          ->fetchObject();

        $form['syndication_publish_language'] = [
          '#type' => 'select',
          '#title' => 'Syndication Language',
          '#options' => [
            '1' => 'English',
            '2' => 'Spanish',
          ],
          '#default_value' => 'html',
          '#weight' => 1000,
        ];

        $form['syndication_action'] = [
          '#type' => 'select',
          '#title' => 'Syndication Action',
          '#options' => [
            'donothing' => '----',
            'publish' => 'Publish to Syndication',
            'unpublish' => 'Delete From Syndication',
            'archive' => 'Archive to Syndication',
            'unarchive' => 'Unarchive to Syndication',
          ],
          '#weight' => 1000,
        ];

        if ($syndicated_content) {

          $form['syndicated_media_id'] = array(
            '#markup' => '<p><b>Media Id:</b><br />' . $syndicated_content->media_id . '</p>',
            '#weight' => 1000,
          );

          $form['syndicated_source_url'] = array(
            '#markup' => '<p><b>Source Url:</b><br />' . $syndicated_content->source_url . '</p>',
            '#weight' => 1000,
          );

          $form['syndicated_tiny_url'] = array(
            '#markup' => '<p><b>Source Url:</b><br />' . $syndicated_content->tiny_url . '</p>',
            '#weight' => 1000,
          );

          // check to see if locally owned
          if ($syndicated_content->locally_owned == 1) {
            $content_owner = 'Locally Owned: you have published this content';
          }

          $form['syndicated_locally_owned'] = array(
            '#markup' => '<p><b>Content Owner:</b><br />' . $content_owner . '</p>',
            '#weight' => 1000,
          );

          $form['syndicated_last_published'] = array(
            '#markup' => '<p><b>Last Published to Syndication:</b><br />' . $syndicated_content->date_updated . '</p>',
            '#weight' => 1000,
          );

          $form['syndicated_locally_owned'] = array(
            '#markup' => '<p><b>Last Syndication Sync:</b><br />' . $syndicated_content->date_synced . '</p>',
            '#weight' => 1000,
          );

          // check to see if content is archived
          if ($syndicated_content->archive == 0) {
            $archived_content = 'No';
          } else {
            $archived_content = 'Yes';
          }

          $form['syndicated_archived'] = array(
            '#markup' => '<p><b>Archived:</b><br />' . $archived_content . '</p>',
            '#weight' => 1000,
          );
        }

      }

    }
  }
}

/**
 * Submit callback function
 */
function auto_publish_submit($form, &$form_state) {

  $syndication_language =  1;
  $syndication_action =  'publish';
  $node_id = $form_state->getValues()['nid'];

  _syndicated_content_node_validate($node_id, $syndication_language, $syndication_action);

  return _syndicated_content_node_update($node_id, $syndication_language, $syndication_action);
}



/**
 * @param $variables
 */
function syndicated_content_preprocess_node(&$variables) {

  $wrap_text = $variables['content']['body'][0]['#text'];

  $dom = new DOMDocument();
  $dom->loadHTML($wrap_text);

  $xpath = new DOMXPath($dom);
  $syndicate_class = $xpath->query('//div[@class="syndicate"]');

  // place syndicate div around body if there is not one
  if($syndicate_class->length == 0) {
    $variables['content']['body'][0]['#text'] = '<div class="syndicate">' . $wrap_text . '</div>';
  }
}

/**
 * @param \Drupal\node\NodeInterface $node
 * @return bool|\Drupal\Core\Database\StatementInterface|int|null
 */
function syndicated_content_node_insert( \Drupal\node\NodeInterface $node ) {

  $body = '<div class="syndicate">' . $node->body->value . '</div>';

  $node->body = array('format' => 'full_html', 'value' => $body);
  $node->save();


  module_load_include('php','syndicated_content','includes/syndicated_content.data');

  $node_id = $node->id();
  //$syndication_language =  1; //$_REQUEST['syndication_publish_language'];
  //$syndication_action =  "publish"; //$_REQUEST['syndication_action'];

  //_syndicated_content_node_validate($node_id, $syndication_language, $syndication_action);
  //return _syndicated_content_node_update($node_id, $syndication_language, $syndication_action);
}

/**
 * @param EntityInterface $node
 */
function syndicated_content_node_update( \Drupal\node\NodeInterface $node) {

  module_load_include('php','syndicated_content','includes/syndicated_content.data');

  $node_id = $node->id();
  $syndication_language = $_REQUEST['syndication_publish_language'];
  $syndication_action = $_REQUEST['syndication_action'];

  // check to see if we need to publish unpublish archive ...
  switch($syndication_action) {

    // start publish
    case 'publish':

      return _syndicated_content_node_update($node_id, $syndication_language, $syndication_action);
      break;

    // start unpublish
    case 'unpublish':

      $conn = \Drupal::database();

      $drupaldata = $conn->select('syndicated_content', 'sc')
        ->fields('sc')
        ->condition('node_id', $node_id)
        ->execute()
        ->fetchObject();

      /// this node is not subscribed to anything
      if ( empty($drupaldata) ) {
        drupal_set_message('This node is not subscribed to any syndicated content.');
        return;

      } else {

        if ( empty($drupaldata->locally_owned) ) {
          drupal_set_message('You cannot delete content you do not own.');
          return;
        }

        $syndication = _syndicated_content_api_factory();
        $response = $syndication->unPublishMediaById($drupaldata->media_id);

        if ( $response->status == 200 ) {

          $num_deleted = $conn->delete('syndicated_content')
            ->condition('node_id', $node_id)
            ->execute();

          drupal_set_message('Deleted From Syndication Source.');

        } else {

          drupal_set_message('Failed to delete source.');
        }

      }

      _syndicated_content_stop_destination($node->id());

      break;

    // start archive
    case 'archive':

      $conn = \Drupal::database();

      $drupaldata = $conn->select('syndicated_content', 'sc')
        ->fields('sc')
        ->condition('node_id', $node_id)
        ->execute()
        ->fetchObject();

      /// this node is not subscribed to anything
      if ( empty($drupaldata) ) {

        form_set_error('syndication_action', t('This node is not subscribed to any syndicated content.'));
        return;

      } else {

        if ( empty($drupaldata->locally_owned) ) {

          form_set_error('syndication_action', t('You cannot archive content you do not own.'));
          return;
        }

        $syndication = _syndicated_content_api_factory();
        $response = $syndication->archiveMediaById($drupaldata->media_id);

        if ( $response->status == 200 ) {

          $conn->update('syndicated_content')
            ->fields(array('archive' => 1))
            ->condition('media_id', $drupaldata->media_id)
            ->execute();

          drupal_set_message('Archived to Syndication Source.');

        } else {

          drupal_set_message('Failed to archive.');
        }

      }

      _syndicated_content_stop_destination($node->id());

      break;

    case 'unarchive':

      $conn = \Drupal::database();

      $drupaldata = $conn->select('syndicated_content', 'sc')
        ->fields('sc')
        ->condition('node_id', $node_id)
        ->execute()
        ->fetchObject();

      /// this node is not subscribed to anything
      if ( empty($drupaldata) ) {

        form_set_error('syndication_action', t('This node is not subscribed to any syndicated content.'));
        return;

      } else {

        if ( empty($drupaldata->locally_owned) ) {
          form_set_error('syndication_action', t('You cannot unarchive content you do not own.'));
          return;
        }

        $syndication = _syndicated_content_api_factory();
        $response = $syndication->unArchiveMediaById($drupaldata->media_id);

        if ( $response->status == 200 ) {
          // update content to be archived
          $conn->update('syndicated_content')
            ->fields(array('archive' => 0))
            ->condition('media_id', $drupaldata->media_id)
            ->execute();

          drupal_set_message('Unarchived from Syndication Source.');

        } else {

          drupal_set_message('Failed to unarchive.');
        }

      }
      _syndicated_content_stop_destination($node->id());

      break;
  }
}


// NODE VIEW Wrapper
function syndicated_content_node_view(array &$build, \Drupal\node\NodeInterface $node, $view_mode, $langcode) {
    module_load_include('php','syndicated_content','includes/syndicated_content.data');
    return _syndicated_content_node_view( $node, $view_mode, $langcode );
}

// create custom permission
function syndicated_content_permission() {
  return array(
    'syndication publish rights' => array(
      'title' => t('Syndication publish rights'),
      'description' => t('Syndication publishing rights.'),
    ),
    'syndication configuration rights' => array(
      'title' => t('Syndication configuration rights'),
      'description' => t('Syndication configuration rights.'),
    ),
  );
}